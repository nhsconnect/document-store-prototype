#!/usr/bin/env bash

set -e

readonly aws_region=eu-west-2
#AWS_DEFAULT_REGION=eu-west-2

function assume_ci_role() {
  role_arn="$(aws ssm get-parameters --region ${aws_region} --names /document-store/dev/user-input/ci-role --query Parameters[0].Value --output text)"
  session_name="document-store-session"

  echo "Assuming ci-role in document store..."

  sts=($(aws sts assume-role \
    --role-arn "$role_arn" \
    --role-session-name "$session_name" \
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
    --output text))

  export AWS_ACCESS_KEY_ID="${sts[0]}"
  export AWS_SECRET_ACCESS_KEY="${sts[1]}"
  export AWS_SESSION_TOKEN="${sts[2]}"
}

function assume_role_for_ci_agent {
  environment=$1
  echo "Environment is $1"
  _clear_aws_env_credentials
  session_name="document-store-session"

  ROLE_NAME='ci-role'

  echo >&2 "Assuming $ROLE_NAME role for CI agent in ${environment} account"
  desired_account_id=$(_get_aws_ssm_secret "/prs/${environment}/user-input/external/aws-account-id")
  desired_role_arn="arn:aws:iam::$desired_account_id:role/$ROLE_NAME"

  json="$(aws sts assume-role --role-arn "$desired_role_arn")"
}

cis2_client_id= echo _get_aws_ssm_secret /development/cis2/client_id
cis2_client_secret= echo _get_aws_ssm_secret /development/cis2/client_secret

function get_cis2_client_id() {
   #_get_aws_ssm_secret /development/cis2/client_id
  echo "$(aws ssm get-parameters --region ${aws_region} --names /development/cis2/client_id --query Parameters[0].Value --output text)"
}

function get_cis2_client_secret() {
   #_get_aws_ssm_secret /development/cis2/client_secret
  echo "$(aws ssm get-parameters --region ${aws_region} --names /development/cis2/client_secret --query Parameters[0].Value --output text)"
}

function export_aws_credentials() {
  export_aws_access_key="export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID"
  export_aws_secret_access_key="export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
  export_aws_session_token="export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN"
  echo "${export_aws_access_key}
${export_aws_secret_access_key}
${export_aws_session_token}" >temp_aws_credentials.sh
  chmod +x temp_aws_credentials.sh
}

function deploy_ui() {
  app_id="$(jq -r '.amplify_app_ids.value[0]' "$1")"
  aws amplify create-deployment --region "${aws_region}" --app-id "$app_id" --branch-name main >deployment.output
  jobId="$(jq -r .jobId deployment.output)"
  zipUploadUrl="$(jq -r .zipUploadUrl deployment.output)"
  rm -f deployment.output

  curl -XPUT --data-binary "@$2" "$zipUploadUrl"
  aws amplify start-deployment --region "${aws_region}" --app-id "$app_id" --branch-name main --job-id "${jobId}"
}

function update_ui_config_file() {
  user_pool="$(jq -r '.cognito_user_pool_ids.value[0]' "$1")"
  user_pool_client_id="$(jq -r '.cognito_client_ids.value[0]' "$1")"
  api_endpoint="$(jq -r '.api_gateway_url.value' "$1")"
  cognito_domain="$(jq -r '.cognito_user_pool_domain.value[0]' "$1")"
  cognito_redirect_signin="$(jq -r '.cognito_redirect_signin.value[0]' "$1")"
  cognito_redirect_signout="$(jq -r '.cognito_redirect_signin.value[0]' "$1")"
  amplify_app_id="$(jq -r '.amplify_app_ids.value[0]' "$1")"
  sed -i "s/%pool-id%/${user_pool}/" ui/src/config.js
  sed -i "s/%client-id%/${user_pool_client_id}/" ui/src/config.js
  sed -i "s/%region%/${aws_region}/" ui/src/config.js
  sed -i "s~%api-endpoint%~${api_endpoint}~" ui/src/config.js
  sed -i "s/%cognito-domain%/${cognito_domain}/" ui/src/config.js
  sed -i "s~%cognito-redirect-signin%~${cognito_redirect_signin}~" ui/src/config.js
  sed -i "s~%cognito-redirect-signout%~${cognito_redirect_signout}~" ui/src/config.js
  sed -i "s/%amplify-app-id%/${amplify_app_id}/" ui/src/config.js
}

function get_terraform_output() {
  cd terraform
  assume_ci_role
  terraform init
  terraform output -json >"../$1"
  cd ..
}

function repackage_tgz_as_zip() {
  mkdir ui-build-artefacts
  cd ui-build-artefacts
  tar -xf "../$1"
  zip -r "../$2" *
  cd ..
  rm -rf ui-build-artefacts
}

function check_env {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function _get_aws_ssm_secret {
  secret_id=$1
  echo "*** secret id is *** " secret_id
  json=$(aws ssm get-parameter --with-decryption --region "eu-west-2" --name $secret_id)
  if [ $? != 0 ]; then
    echo >&2 "Failed to obtain AWS secret from SSM: $secret_id"
    exit $EXIT_CODE_GENERAL_FAILURE
  fi
  echo $json | jq -r ".Parameter.Value"
}

function _clear_aws_env_credentials {
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN
  unset AWS_SECURITY_TOKEN
}

function tf_init {
  echo "*** in tf_init ***"
  check_env
  cd terraform

  terraform init -reconfigure \
    -backend-config key="prs/terraform.tfstate" \
    -backend-config bucket="prs-${NHS_ENVIRONMENT}-terraform-state" \
    -backend-config dynamodb_table="prs-${NHS_ENVIRONMENT}-terraform-state-locking" \
    -backend-config region=${AWS_DEFAULT_REGION}

  echo "*** out of tf_init ***"
}

function tf_plan {
  echo "*** in tf_plan ***"
  operation=$1

  #  echo "*** var file *** " -var-file=$NHS_ENVIRONMENT.tfvars
  #  echo "*** cognito cis2 client id is *** " -var cognito_cis2_provider_client_id=$(get_cis2_client_id)
  #  echo "*** cognito cis2 client secret is *** " -var cognito_cis2_provider_client_secret=$(get_cis2_client_secret)
  #  echo "*** lambda_jar_filename is *** " -var lambda_jar_filename=../app/build/libs/app.jar

  tf_init

  terraform get # modules
  if [[ "${operation}" == "create" ]]; then
#    terraform plan -var-file=$NHS_ENVIRONMENT.tfvars -var lambda_jar_filename=../app/build/libs/app.jar -out=tfplan
   -var cognito_cis2_provider_client_id=${cis2_client_id} -var cognito_cis2_provider_client_secret=${cis2_client_secret} -var lambda_jar_filename=../app/build/libs/app.jar -out=tfplan
  elif [[ "${operation}" == "destroy" ]]; then
    terraform plan -var-file="../terraform/${NHS_ENVIRONMENT}.tfvars" -var cognito_cis2_provider_client_id=$(get_cis2_client_id) -var cognito_cis2_provider_client_secret=$(get_cis2_client_secret) -var lambda_jar_filename=../app/build/libs/app.jar -out=tfplan -destroy
  else
    echo "Unknown operation (should be create or destroy), got: ${operation}"
    exit 1
  fi

  echo "*** out of tf_plan ***"

}

#function tf_apply {
#  tf_init
#  terraform get # modules
#  terraform apply tfplan
#}

readonly command="$1"
case "${command}" in
install-ui-dependencies)
  cd ui
  npm install
  ;;
configure-ui)
  get_terraform_output terraform_output.json
  update_ui_config_file terraform_output.json
  ;;
test-ui)
  cd ui
  npm install
  CI=true npm test
  ;;
build-ui)
  cd ui
  npm run build
  cd build
  tar -czf ../ui.tgz *
  ;;
_tf)
  check_env
  tf_init
  bash
  ;;
tf)
  check_env
  dojo -c Dojofile-infra "./tasks _tf"
  ;;
_tf_plan)
  #  assume_role_for_ci_agent $NHS_ENVIRONMENT
  tf_plan "$2"
  ;;
tf_plan)
  check_env
  dojo -c Dojofile-infra "./tasks _tf_plan $2"
  ;;
#_tf_apply)
#  _assume_environment_role $NHS_ENVIRONMENT
#  tf_apply
#  ;;
#tf_apply)
#  check_env
#  dojo -c Dojofile-infra "./tasks _tf_apply"
#  ;;
plan-deploy)
  cd terraform
  assume_ci_role
  terraform init -backend-config dev.s3.tfbackend
  terraform plan -var-file="../terraform/development.tfvars" -var cognito_cis2_provider_client_id=$(get_cis2_client_id) -var cognito_cis2_provider_client_secret=$(get_cis2_client_secret) -var lambda_jar_filename=../jars/libs/app.jar -out=tfplan
  ;;
deploy)
  cd terraform
  assume_ci_role
  terraform init -backend-config dev.s3.tfbackend
  terraform apply tfplan
  ;;
deploy-ui)
  get_terraform_output terraform_output.json
  repackage_tgz_as_zip tars/ui.tgz ui.zip
  deploy_ui terraform_output.json ui.zip
  ;;
extract-raw-terraform-output)
  terraform_output_name=$2
  cd terraform
  assume_ci_role
  terraform init -backend-config dev.s3.tfbackend
  terraform output -raw "${terraform_output_name}" >"../${terraform_output_name}_artifact"
  ;;
extract-json-terraform-output)
  terraform_output_name=$2
  cd terraform
  assume_ci_role
  terraform init -backend-config dev.s3.tfbackend
  terraform output -json "${terraform_output_name}" >"../${terraform_output_name}_artifact"
  ;;
export-aws-creds)
  assume_ci_role
  export_aws_credentials
  ;;
run-test-harness)
  source ./temp_aws_credentials.sh
  rm temp_aws_credentials.sh
  ./gradlew testHarness:test
  ;;
esac
