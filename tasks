#!/usr/bin/env bash

set -e

readonly aws_region=eu-west-2

function assume_ci_role() {
  role_arn="$(aws ssm get-parameters --region ${aws_region} --names /document-store/${ENVIRONMENT}/user-input/ci-role --query Parameters[0].Value --output text)"
  session_name="document-store-session"

  echo "Assuming ci-role in document store..."

  sts=($(aws sts assume-role \
    --role-arn "$role_arn" \
    --role-session-name "$session_name" \
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
    --output text))

  export AWS_ACCESS_KEY_ID="${sts[0]}"
  export AWS_SECRET_ACCESS_KEY="${sts[1]}"
  export AWS_SESSION_TOKEN="${sts[2]}"
}

function get_cis2_client_id() {
  echo "$(aws ssm get-parameters --region ${aws_region} --names /development/cis2/client_id --query Parameters[0].Value --output text)"
}

function get_cis2_client_secret() {
  echo "$(aws ssm get-parameters --region ${aws_region} --names /development/cis2/client_secret --query Parameters[0].Value --output text)"
}

function get_cypress_username() {
  echo "$(aws ssm get-parameters --region ${aws_region} --names /prs/${ENVIRONMENT}/user-input/cypress-username --query Parameters[0].Value --output text)"

}

function get_cypress_password() {
  echo "$(aws ssm get-parameters --region ${aws_region} --names /prs/${ENVIRONMENT}/user-input/cypress-password --with-decryption --query Parameters[0].Value --output text)"

}

function export_aws_credentials() {
  export_aws_access_key="export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID"
  export_aws_secret_access_key="export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
  export_aws_session_token="export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN"
  echo "${export_aws_access_key}
${export_aws_secret_access_key}
${export_aws_session_token}" >temp_aws_credentials.sh
  chmod +x temp_aws_credentials.sh
}

function deploy_ui() {
  app_id="$(jq -r '.amplify_app_ids.value[0]' "$1")"
  aws amplify create-deployment --region "${aws_region}" --app-id "$app_id" --branch-name main >deployment.output
  jobId="$(jq -r .jobId deployment.output)"
  zipUploadUrl="$(jq -r .zipUploadUrl deployment.output)"
  rm -f deployment.output

  curl -XPUT --data-binary "@$2" "$zipUploadUrl"
  aws amplify start-deployment --region "${aws_region}" --app-id "$app_id" --branch-name main --job-id "${jobId}"
}

function get_signout_url {
  if [[ $ENVIRONMENT -eq "dev" ]]; then
    echo '.cognito_redirect_signout.value[1]'
  else
    echo '.cognito_redirect_signout.value[0]'
  fi
}

function update_ui_config_file() {
  user_pool="$(jq -r '.cognito_user_pool_ids.value[0]' "$1")"
  user_pool_client_id="$(jq -r '.cognito_client_ids.value[0]' "$1")"
  api_endpoint="$(jq -r '.api_gateway_url.value' "$1")"
  cognito_domain="$(jq -r '.cognito_user_pool_domain.value[0]' "$1")"
  cognito_redirect_signin="$(jq -r '.cognito_redirect_signin.value[0]' "$1")"
  cognito_redirect_signout="$(jq -r $(get_signout_url) "$1")"
  amplify_app_id="$(jq -r '.amplify_app_ids.value[0]' "$1")"
  sed -i "s/%pool-id%/${user_pool}/" ui/src/config.js
  sed -i "s/%client-id%/${user_pool_client_id}/" ui/src/config.js
  sed -i "s/%region%/${aws_region}/" ui/src/config.js
  sed -i "s~%api-endpoint%~${api_endpoint}~" ui/src/config.js
  sed -i "s/%cognito-domain%/${cognito_domain}/" ui/src/config.js
  sed -i "s~%cognito-redirect-signin%~${cognito_redirect_signin}~" ui/src/config.js
  sed -i "s~%cognito-redirect-signout%~${cognito_redirect_signout}~" ui/src/config.js
  sed -i "s/%amplify-app-id%/${amplify_app_id}/" ui/src/config.js
}

function create_cypress_config_file() {
  cp ui/cypress.env.json.example ui/cypress.env.json
  username=$(get_cypress_username)
  password=$(get_cypress_password)

  sed -i "s/%environment%/${ENVIRONMENT}/" ui/cypress.env.json
  sed -i "s/%username%/${username}/" ui/cypress.env.json
  sed -i "s~%password%~${password}~" ui/cypress.env.json
}

function export_cypress_base_url() {
  echo "CYPRESS_BASE_URL=https://main.$(jq -r '.amplify_app_ids.value[0]' "$1").amplifyapp.com" > ui/cypress.sh
}

function get_terraform_output() {
  assume_ci_role
  tf_init
  terraform output -json >"../$1"
  cd ..
}

function repackage_tgz_as_zip() {
  mkdir ui-build-artefacts
  cd ui-build-artefacts
  tar -xf "../$1"
  zip -r "../$2" *
  cd ..
  rm -rf ui-build-artefacts
}

function check_env {
  if [[ -z "${ENVIRONMENT}" ]]; then
    echo "Must set ENVIRONMENT"
    exit 1
  fi
}

function tf_init {
  check_env
  cd terraform

  terraform init \
    -backend-config ${ENVIRONMENT}.s3.tfbackend
}

readonly command="$1"
case "${command}" in
install-ui-dependencies)
  cd ui
  npm ci
  ;;
configure-ui)
  get_terraform_output terraform_output.json
  update_ui_config_file terraform_output.json
  ;;
test-ui)
  cd ui
  npm ci
  CI=true npm test
  ;;
build-ui)
  cd ui
  REACT_APP_ENV=${ENVIRONMENT} npm run build
  cd build
  tar -czf ../ui.tgz *
  ;;
_build-api-jars)
  gradle assemble
  ;;
build-api-jars)
  dojo './tasks _build-api-jars'
  ;;
start-localstack)
  test -e app/build/libs/app.jar || dojo 'gradle assemble'
  dojo -c Dojofile-integration
  ;;
deploy-to-localstack)
  ./tasks start-localstack
  ;;
tf_plan)
  assume_ci_role
  tf_init
  terraform plan -var-file="../terraform/${ENVIRONMENT}.tfvars" -var cognito_cis2_provider_client_id=$(get_cis2_client_id) -var cognito_cis2_provider_client_secret=$(get_cis2_client_secret) -var lambda_jar_filename=../jars/libs/app.jar -out=tfplan
  ;;
tf_apply)
  assume_ci_role
  tf_init
  terraform apply tfplan
  ;;
deploy-ui)
  get_terraform_output terraform_output.json
  repackage_tgz_as_zip tars/ui.tgz ui.zip
  deploy_ui terraform_output.json ui.zip
  ;;
extract-raw-terraform-output)
  terraform_output_name=$2
  assume_ci_role
  tf_init
  terraform output -raw "${terraform_output_name}" >"../${terraform_output_name}_artifact"
  ;;
extract-json-terraform-output)
  terraform_output_name=$2
  assume_ci_role
  tf_init
  terraform output -json "${terraform_output_name}" >"../${terraform_output_name}_artifact"
  ;;
export-aws-creds)
  assume_ci_role
  export_aws_credentials
  ;;
configure-e2e-tests)
  get_terraform_output terraform_output.json
  export_cypress_base_url terraform_output.json
  create_cypress_config_file
  ;;
run-e2e-tests)
  cd ui
  source ./cypress.sh
  echo $CYPRESS_BASE_URL
  rm cypress.sh
  CYPRESS_BASE_URL=${CYPRESS_BASE_URL} ./node_modules/.bin/cypress run
  ;;
esac
