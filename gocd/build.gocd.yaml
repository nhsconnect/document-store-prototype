format_version: 4
common:
  build:
    jobs:
      backend: &build_backend
        artifacts:
          - build:
              source: app/build/libs
              destination: jars
          - test:
              source: app/build/test-results
              destination: test-reports
        tasks:
          - exec:
              command: dojo
              arguments:
                - "./gradlew app:build"
      frontend: &build_frontend
        artifacts:
          - build:
              source: ui/ui.tgz
              destination: tars
        tasks:
          - exec:
              command: dojo
              arguments:
                - -c
                - Dojofile-node
                - ./tasks install-ui-dependencies
          - exec:
              command: dojo
              arguments:
                - -c
                - Dojofile-node
                - ./tasks test-ui
          - exec:
              command: dojo
              arguments:
                - -c
                - Dojofile-infra
                - ./tasks configure-ui
          - exec:
              command: dojo
              arguments:
                - -c
                - Dojofile-node
                - ./tasks build-ui
  plan_terraform: &plan_terraform
    artifacts:
      - build:
          source: terraform/tfplan
          destination: terraform/
    tasks:
      - fetch:
          stage: build
          job: backend
          source: jars
      - exec:
          command: dojo
          arguments:
            - -c
            - Dojofile-infra
            - ./tasks tf_plan
  deploy_terraform: &deploy_terraform
    artifacts:
      - build:
          source: api_gateway_url_artifact
          destination: properties
      - build:
          source: cognito_user_pool_ids_artifact
          destination: properties
      - build:
          source: cognito_client_ids_artifact
          destination: properties
      - build:
          source: amplify_app_ids_artifact
          destination: properties
    tasks:
      - fetch:
          stage: plan_terraform
          job: plan
          source: terraform/tfplan
          destination: terraform/
          is_file: yes
      - fetch:
          stage: build
          job: backend
          source: jars
      - exec:
          command: dojo
          arguments:
            - -c
            - Dojofile-infra
            - ./tasks tf_apply
      - exec:
          command: dojo
          arguments:
            - -c
            - Dojofile-infra
            - ./tasks extract-raw-terraform-output api_gateway_url
      - exec:
          command: dojo
          arguments:
            - -c
            - Dojofile-infra
            - ./tasks extract-json-terraform-output cognito_user_pool_ids
      - exec:
          command: dojo
          arguments:
            - -c
            - Dojofile-infra
            - ./tasks extract-json-terraform-output cognito_client_ids
      - exec:
          command: dojo
          arguments:
            - -c
            - Dojofile-infra
            - ./tasks extract-json-terraform-output amplify_app_ids
  deploy_ui: &deploy_ui
    tasks:
      - fetch:
          stage: build
          job: frontend
          source: tars
      - exec:
          command: dojo
          arguments:
            - -c
            - Dojofile-infra
            - ./tasks deploy-ui
  e2e_test: &e2e_test
    tasks:
      - exec:
          # TODO: Create separate Cypress NPM project so that we do not have to install all the frontend deps
          command: dojo
          arguments:
            - -c
            - Dojofile-node
            - ./tasks install-ui-dependencies
      - exec:
          command: dojo
          arguments:
            - -c
            - Dojofile-infra
            - ./tasks configure-e2e-tests
      - exec:
          command: dojo
          arguments:
            - -c
            - Dojofile-node
            - ./ui/node_modules/.bin/cypress install && ./tasks run-e2e-tests
    artifacts:
      - test:
          source: ui/cypress/screenshots
      - test:
          source: ui/cypress/videos
pipelines:
  "paperless-record-service.dev":
    group: paperless-record-service
    label_template: "${git[:8]}"
    materials:
      git:
        type: configrepo
        blacklist:
          - .git*
          - .idea/**/*.*
          - documentation/**/*.*
          - gradle/**/*.*
    stages:
      - build:
          environment_variables:
            ENVIRONMENT: dev
            NHS_CIS2_ENVIRONMENT: development
            OIDC_PROVIDER_ID: "cis2devoidc"
          clean_workspace: true
          jobs:
            backend: *build_backend
            frontend: *build_frontend
      - plan_terraform:
          environment_variables:
            ENVIRONMENT: dev
            NHS_CIS2_ENVIRONMENT: development
          clean_workspace: true
          jobs:
            plan: *plan_terraform
      - deploy_terraform:
          environment_variables:
            ENVIRONMENT: dev
            NHS_CIS2_ENVIRONMENT: development
          clean_workspace: true
          jobs:
            apply: *deploy_terraform
      - deploy_ui:
          environment_variables:
            ENVIRONMENT: dev
            NHS_CIS2_ENVIRONMENT: development
          clean_workspace: true
          jobs:
            deploy: *deploy_ui
      - e2e_tests:
          environment_variables:
            ENVIRONMENT: dev
            NHS_CIS2_ENVIRONMENT: development
            OIDC_PROVIDER_ID: "cis2devoidc"
          clean_workspace: true
          jobs:
            e2e-tests: *e2e_test
  "paperless-record-service.pre-prod":
    group: paperless-record-service
    label_template: "${git[:8]}"
    materials:
      git:
        type: configrepo
        blacklist:
          - .git*
          - .idea/**/*.*
          - documentation/**/*.*
          - gradle/**/*.*
      dev_env:
        pipeline: paperless-record-service.dev
        stage: e2e_tests
    stages:
      - build:
          environment_variables:
            ENVIRONMENT: pre-prod
            NHS_CIS2_ENVIRONMENT: development
            OIDC_PROVIDER_ID: "COGNITO"
          clean_workspace: true
          jobs:
            backend: *build_backend
            frontend: *build_frontend
      - plan_terraform:
          environment_variables:
            ENVIRONMENT: pre-prod
            NHS_CIS2_ENVIRONMENT: development
          clean_workspace: true
          jobs:
            plan: *plan_terraform
      - deploy_terraform:
          approval:
            type: manual
            allow_only_on_success: true
          environment_variables:
            ENVIRONMENT: pre-prod
            NHS_CIS2_ENVIRONMENT: development
          clean_workspace: true
          jobs:
            apply: *deploy_terraform
      - deploy_ui:
          environment_variables:
            ENVIRONMENT: pre-prod
            NHS_CIS2_ENVIRONMENT: development
          clean_workspace: true
          jobs:
            deploy: *deploy_ui
      - e2e_tests:
          environment_variables:
            ENVIRONMENT: pre-prod
            NHS_CIS2_ENVIRONMENT: development
            OIDC_PROVIDER_ID: "COGNITO"
          clean_workspace: true
          jobs:
            e2e-tests: *e2e_test
  "paperless-record-service.prod":
    group: paperless-record-service
    label_template: "${git[:8]}"
    materials:
      git:
        type: configrepo
        blacklist:
          - .git*
          - .idea/**/*.*
          - documentation/**/*.*
          - gradle/**/*.*
      pre_prod_env:
        pipeline: paperless-record-service.pre-prod
        stage: e2e_tests
    stages:
      - build:
          environment_variables:
            ENVIRONMENT: prod
            NHS_CIS2_ENVIRONMENT: development
            OIDC_PROVIDER_ID: "COGNITO"
          clean_workspace: true
          jobs:
            backend: *build_backend
            frontend: *build_frontend

      - plan_terraform:
          environment_variables:
            ENVIRONMENT: prod
            NHS_CIS2_ENVIRONMENT: development
          clean_workspace: true
          jobs:
            plan: *plan_terraform

      - deploy_terraform:
          approval:
            type: manual
            allow_only_on_success: true
          environment_variables:
            ENVIRONMENT: prod
            NHS_CIS2_ENVIRONMENT: development
          clean_workspace: true
          jobs:
            apply: *deploy_terraform
      - deploy_ui:
          environment_variables:
            ENVIRONMENT: prod
          clean_workspace: true
          jobs:
            deploy: *deploy_ui
