//file:noinspection HttpUrlsUsage

//noinspection GroovyAssignabilityCheck
tasks.register('bootstrapLocalStack', Exec) {
    def dockerHostname = System.getenv('DS_TEST_HOST') ?: 'localhost'

    group 'localstack'
    description 'Configure the LocalStack environment to support Terraform.'

    executable = 'aws'
    args = ['s3api', 'create-bucket', '--bucket=document-store-terraform-state', "--endpoint-url=http://${dockerHostname}:4566"]
}

//noinspection GroovyAssignabilityCheck
tasks.register('initializeTerraform', Exec) {
    def dockerHostname = System.getenv('DS_TEST_HOST') ?: 'localhost'

    group 'localstack'
    description 'Initialize Terraform plugins.'
    mustRunAfter bootstrapLocalStack

    executable = 'terraform'
    args = ['init', '-backend-config=force_path_style=true']
    environment('AWS_S3_ENDPOINT', "http://${dockerHostname}:4566")
    workingDir = '../terraform'

    onlyIf {
        !file('../terraform/.terraform').exists()
    }
}

//noinspection GroovyAssignabilityCheck
tasks.register('deployToLocalStack', Exec) {
    def dockerHostname = System.getenv('DS_TEST_HOST') ?: 'localhost'

    group 'localstack'
    description 'Apply Terraform definitions to LocalStack.'
    dependsOn jar, initializeTerraform

    executable = 'terraform'
    args = ['apply', '-var-file=local.tfvars', "-var=aws_endpoint=http://${dockerHostname}:4566",
            '-var=dynamodb_endpoint=http://172.17.0.2:4566', '-var=s3_endpoint=http://172.17.0.2:4566', '-auto-approve']
    environment('AWS_S3_ENDPOINT', "http://${dockerHostname}:4566")
    workingDir = '../terraform'
}

//noinspection GroovyAssignabilityCheck
tasks.register('storeTerraformOutput', Exec) {
    def dockerHostname = System.getenv('DS_TEST_HOST') ?: 'localhost'

    group 'localstack'
    description 'Write Terraform output to test resources.'
    mustRunAfter deployToLocalStack

    executable = 'terraform'
    args = ['output', '-json']
    environment('AWS_S3_ENDPOINT', "http://${dockerHostname}:4566")
    workingDir = '../terraform'

    standardOutput = new FileOutputStream("terraform.json")
}

//noinspection GroovyAssignabilityCheck
tasks.register("copyTerraformOutput" ,Copy) {
    mustRunAfter storeTerraformOutput
    from '../terraform.json'
    into sourceSets.e2eTest.output.resourcesDir.toPath()
    doLast {
        delete '../terraform.json'
    }
}
//noinspection GroovyAssignabilityCheck
tasks.register('e2eTest', Test) {
    group 'verification'
    description 'Run all end-to-end tests against LocalStack.'
    dependsOn jar, deployToLocalStack, storeTerraformOutput, copyTerraformOutput

    useJUnitPlatform()

    testClassesDirs = sourceSets.e2eTest.output.classesDirs
    classpath = sourceSets.e2eTest.runtimeClasspath
}

//noinspection GroovyAssignabilityCheck
tasks.register('testHarness', Test) {
    group 'verification'
    description 'Run all test harness'

    useJUnitPlatform()

    testClassesDirs = sourceSets.e2eTest.output.classesDirs
    classpath = sourceSets.e2eTest.runtimeClasspath

    filter {
        includeTestsMatching "uk.nhs.digital.docstore.CreateDocumentReferenceE2eTest"
    }
}
